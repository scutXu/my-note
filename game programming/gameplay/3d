9）骨骼蒙皮：
9.1)基本思路
顶点数据在模型局部坐标系，先变换到世界坐标系，再根据绑定姿势，乘逆矩阵到对应骨骼的局部坐标系。再根据动画姿势，乘回到世界坐标系。
从模型空间直接变换到骨骼空间的矩阵称为boneOffsetMatrix，每对mesh和bone之间的映射关系对应一个boneOffsetMatrix，注意mesh和bone之间的关系可以是多对多

9.2)Assimp的骨骼动画结构
Assimp::aiBone实际应该理解为是一个Bone和mesh的映射关系，而不是骨骼，aiBone存储了boneOffsetMatrix
真正代表一根骨骼的类是aiNode

9.3)gameplay的骨骼动画结构
Node->Model->Mesh->MeshSkin->Joint
对应关系：1-1 ， 1-1， 1-1， *-*
joint和MeshSkin的多对多关系说明了一根骨骼可以被多份mesh绑定
joint代表一根骨骼，存储了骨骼的绑定姿势（Joint::_bindPose，注意这里存的是逆矩阵）和当前姿势（Node::_worldMatrix)
MeshSkin代表一套骨架，同时也存储了模型绑定时的局部坐标系(MeshSkin::_bindShape)

9.4)如何使用assimp的数据构建骨架
a) Create a map or a similar container to store which nodes are necessary for the skeleton. Pre-initialise it for all nodes with a "no". 
b) For each bone in the mesh: 
b1) Find the corresponding node in the scene's hierarchy by comparing their names. 
b2) Mark this node as "yes" in the necessityMap. 
b3) Mark all of its parents the same way until you 1) find the mesh's node or 2) the parent of the mesh's node. 
c) Recursively iterate over the node hierarchy 
c1) If the node is marked as necessary, copy it into the skeleton and check its children 
c2) If the node is marked as not necessary, skip it and do not iterate over its children.

9.5)
为了读取assimp到gameplay的对象，可以将MeshSkin::_bindShape设为单位矩阵，将Joint::_bindPose设为offsetMatrix，
但这就意味着一根骨骼不能同时被多份mesh绑定
worldMatrix * bindPose * bindShape * v = worldMatrix * offsetMatrix

10）
和ogre不同，gameplay里的VertexAttributeBinding和Material是强关联关系，
这意味着一份Material不能同时被多份mesh共享使用。但是，Material和Texture::Sampler，
Material和Effect是弱关联关系，且Texture和Effect都会进行缓存，因此不会有多份数据源相同
的texture或program都被载入的情况
